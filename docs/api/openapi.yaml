openapi: "3.1.0"

info:
  title: Heimdall
  description: Simple auth server
  version: 0.0.1

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

tags:
  - name: Users
    description: Manage users
  - name: Auth
    description: Authentication stuff

paths:
  /users:
    get:
      summary: Returns a list of users
      operationId: getUsers
      tags: [Users]
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema: 
                type: object
                required: [response]
                properties:
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      operationId: postUsers
      tags: [Users]
      requestBody:
          content:
            application/json:
              schema: 
                type: object
                required: [firstName, lastName, email]
                properties:
                  firstName:
                    type: string
                    minLength: 1
                    example: John
                  lastName:
                    type: string
                    minLength: 1
                    example: Doe
                  email:
                    type: string
                    format: email
                    example: john.doe@example.com
                  password:
                    description: An optional password to set for the new user
                    type: string
      responses:
        '201':
          description: The new user
          content:
            application/json:
              schema: 
                type: object
                required: [response]
                properties:
                  response:
                    $ref: '#/components/schemas/User'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'

    get:
      summary: Returns a user
      operationId: getUserById
      tags: [Users]
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema: 
                type: object
                required: [response]
                properties:
                  response:
                    $ref: '#/components/schemas/User'

    patch:
      summary: Update a user
      operationId: patchUserById
      tags: [Users]
      requestBody:
          content:
            application/json:
              schema: 
                type: object
                properties:
                  firstName:
                    type: string
                    minLength: 1
                    example: John
                  lastName:
                    type: string
                    minLength: 1
                    example: Doe
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema: 
                type: object
                required: [response]
                properties:
                  response:
                    $ref: '#/components/schemas/User'

    delete:
      summary: Delete a user
      operationId: deleteUserById
      tags: [Users]
      responses:
        '204':
          description: User deleted

  /auth/login:
    post:
      summary: Retrieve an access token
      operationId: authLogin
      tags: [Auth]
      requestBody:
          content:
            application/json:
              schema: 
                type: object
                required: [username, password]
                properties:
                  username:
                    type: string
                    minLength: 1
                    example: test@test.com
                  password:
                    type: string
                    minLength: 1
                    example: password123!
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema: 
                type: object
                required: [response]
                properties:
                  response:
                    $ref: '#/components/schemas/Token'
        '401':
          description: Invalid login
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    enum: [401]
                    example: 401
                  error:
                    type: string
                    example: invalid password

components:
  schemas:
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        firstName:
          type: string
          minLength: 1
          example: John
        lastName:
          type: string
          minLength: 1
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com

    UserId:
      type: string
      format: uuid
      example: 00000000-0000-0000-0000-000000000000

    Token:
      type: object
      properties:
        accessToken:
          type: string
          description: |
            A valid JWT that can be used to authenticate with Heimdall.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJoZWltZGFsbCIsImV4cCI6MTY4NjYyMjcwNiwiaWF0IjoxNjg2NjIxODA2fQ._pAF3OTV-Aa5ADtOATSvbUSytmLYVNrvZ_vXzKddY2Y
        lifespan:
          type: integer
          minimum: 0
          description: |
            The number of seconds until the access token expires.
          example: 900